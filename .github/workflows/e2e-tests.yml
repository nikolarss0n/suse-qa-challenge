name: Rancher Test Suite

on:
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Select the test suite to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - ui
          - api
  push:
    branches: [main, 'test/**', 'feature/**']
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    env:
      ADMIN_PASSWORD: ${{ secrets.RANCHER_ADMIN_PASSWORD }}
      RANCHER_URL: https://localhost:8443

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq docker.io git

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.4.6' # Specify your Terraform version

      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Terraform Apply
        working-directory: terraform
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
        run: |
          echo "${{ secrets.GCP_SA_KEY }}" > terraform/credentials.json
          terraform apply -auto-approve \
            -var "project=${{ secrets.GCP_PROJECT_ID }}" \
            -var "credentials_file=credentials.json"

      - name: Retrieve VM IP
        id: get_ip
        working-directory: terraform
        run: echo "::set-output name=ip::$(terraform output -raw instance_ip)"

      - name: Wait for Rancher API to be Ready
        run: |
          echo "Waiting for Rancher API at ${{ steps.get_ip.outputs.ip }}..."
          until curl -sk https://${{ steps.get_ip.outputs.ip }}/ping > /dev/null 2>&1; do
            echo "Rancher API not ready yet. Retrying in 10 seconds..."
            sleep 10
          done
          echo "Rancher API is available."

      - name: Setup Go Environment
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true
          cache-dependency-path: api-tests/go.sum

      - name: Setup Node.js Environment
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'ui-tests/package-lock.json'

      # Conditional Steps for API Tests
      - name: Setup API Tests
        if: ${{ github.event.inputs.test_suite == 'api' || github.event.inputs.test_suite == 'all' }}
        working-directory: api-tests
        run: |
          # Assuming config.yml is already created by the script on VM
          echo "Config.yml is already created by rancher-local.sh on the VM"
          go mod download

      - name: Run API Tests
        if: ${{ github.event.inputs.test_suite == 'api' || github.event.inputs.test_suite == 'all' }}
        working-directory: api-tests
        run: go test -v ./...

      # Conditional Steps for UI Tests
      - name: Install UI Dependencies
        if: ${{ github.event.inputs.test_suite == 'ui' || github.event.inputs.test_suite == 'all' }}
        working-directory: ui-tests
        run: npm ci

      - name: Run UI Tests
        if: ${{ github.event.inputs.test_suite == 'ui' || github.event.inputs.test_suite == 'all' }}
        uses: cypress-io/github-action@v6
        with:
          working-directory: ui-tests
          browser: chrome
        env:
          CYPRESS_BASE_URL: ${{ steps.get_ip.outputs.ip }}
          CYPRESS_RANCHER_URL: ${{ steps.get_ip.outputs.ip }}
          CYPRESS_VERIFY_SSL: false
          NODE_TLS_REJECT_UNAUTHORIZED: '0'
          CYPRESS_CHROME_WEB_SECURITY: false
          CYPRESS_AUTH_TOKEN: ${{ secrets.CYPRESS_AUTH_TOKEN }}

      - name: Upload Test Artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-artifacts
          path: |
            ui-tests/cypress/videos
            ui-tests/cypress/screenshots
            api-tests/test-reports

      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Cleanup Rancher
        if: always()
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ steps.get_ip.outputs.ip }} "./scripts/rancher-local.sh stop"
        env:
          GITHUB_ENV: $GITHUB_ENV

      - name: Terraform Destroy
        if: always()
        working-directory: terraform
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
        run: |
          terraform destroy -auto-approve \
            -var "project=${{ secrets.GCP_PROJECT_ID }}" \
            -var "credentials_file=credentials.json"
