name: Rancher Test Suite

on:
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Select test suite to run'
        required: true
        default: 'all'
        type: choice
        options: [all, ui, api]
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  infrastructure:
    runs-on: ubuntu-latest
    outputs:
      rancher_url: ${{ steps.get_url.outputs.url }}
    steps:
      - uses: actions/checkout@v3

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.4.6'

      - name: Configure GCP Credentials
        run: echo '${{ secrets.GCP_SA_KEY }}' > credentials.json

      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Terraform Apply
        working-directory: terraform
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
        run: |
          terraform apply -auto-approve \
            -var "project=${{ secrets.GCP_PROJECT_ID }}" \
            -var "credentials_file=credentials.json" \
            -var "zone=us-central1-a" \
            -var "machine_type=e2-medium"

      - name: Wait for Rancher Initialization
        working-directory: terraform
        id: get_url
        run: |
          RANCHER_IP=$(terraform output -raw instance_ip)
          echo "Waiting for Rancher to initialize..."
          # Wait for HTTPS endpoint to become available
          timeout 300 bash -c 'while [[ "$(curl -k -s -o /dev/null -w ''%{http_code}'' https://'$RANCHER_IP')" != "200" ]]; do sleep 5; done'
          echo "url=https://$RANCHER_IP" >> $GITHUB_OUTPUT

  api-tests:
    needs: infrastructure
    if: inputs.test_suite == 'api' || inputs.test_suite == 'all'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true
          cache-dependency-path: api-tests/go.sum

      - name: Run API Tests
        working-directory: api-tests
        env:
          RANCHER_URL: ${{ needs.infrastructure.outputs.rancher_url }}
        run: |
          go mod download
          go test -v ./... -rancher-url=$RANCHER_URL

      - name: Upload API Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: api-test-results
          path: api-tests/test-reports

  ui-tests:
    needs: infrastructure
    if: inputs.test_suite == 'ui' || inputs.test_suite == 'all'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'ui-tests/package-lock.json'

      - name: Run UI Tests
        uses: cypress-io/github-action@v6
        with:
          working-directory: ui-tests
          browser: chrome
        env:
          CYPRESS_BASE_URL: ${{ needs.infrastructure.outputs.rancher_url }}
          CYPRESS_VERIFY_SSL: false
          NODE_TLS_REJECT_UNAUTHORIZED: '0'

      - name: Upload UI Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: ui-test-results
          path: |
            ui-tests/cypress/videos
            ui-tests/cypress/screenshots

  cleanup:
    needs: [infrastructure, api-tests, ui-tests]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.4.6'

      - name: Configure GCP Credentials
        run: echo '${{ secrets.GCP_SA_KEY }}' > credentials.json

      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Terraform Destroy
        working-directory: terraform
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
        run: |
          terraform destroy -auto-approve \
            -var "project=${{ secrets.GCP_PROJECT_ID }}" \
            -var "credentials_file=credentials.json" \
            -var "zone=us-central1-a" \
            -var "machine_type=e2-medium"