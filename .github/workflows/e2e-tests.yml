name: Infrastructure and Tests

on:
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Select test suite to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - ui
          - api
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 60  # Increased timeout to allow for potential delays

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Generate SSH Key
        run: |
          ssh-keygen -t ed25519 -f ~/.ssh/gh_actions -q -N ""
          echo "SSH_PUBLIC_KEY=$(cat ~/.ssh/gh_actions.pub)" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.4.6'

      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Attempt VM Cleanup
        working-directory: terraform
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
        run: |
          terraform destroy -auto-approve \
            -var "project=${{ secrets.GCP_PROJECT_ID }}" \
            -var "zone=us-central1-a" \
            -var "machine_type=e2-medium" \
            -var "ssh_public_key=${{ env.SSH_PUBLIC_KEY }}" || true

      - name: Terraform Apply
        working-directory: terraform
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
        run: |
          terraform apply -auto-approve \
            -var "project=${{ secrets.GCP_PROJECT_ID }}" \
            -var "zone=us-central1-a" \
            -var "machine_type=e2-medium" \
            -var "ssh_public_key=${{ env.SSH_PUBLIC_KEY }}"

      - name: Wait for VM Availability
        run: |
          echo "Waiting for VM to become available..."
          sleep 120  # Wait to ensure the VM is up and running, including network stabilization

      - name: Verify VM IP is Reachable
        run: |
          for i in {1..10}; do
            if ping -c 1 -W 5 ${{ env.VM_IP }}; then
              echo "VM IP is reachable."
              break
            else
              echo "VM IP not reachable yet, retrying..."
              sleep 15
            fi
          done

      - name: Make Rancher Script Executable
        run: chmod +x ./scripts/rancher-local.sh

      - name: Start Rancher and Generate API Tokens
        run: ./scripts/rancher-local.sh start
        env:
          GITHUB_ENV: $GITHUB_ENV
          ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}

      - name: Wait for Rancher to be Ready
        run: |
          echo "Waiting for Rancher to become available..."
          MAX_RETRIES=20
          RETRY_DELAY=15
          for i in $(seq 1 $MAX_RETRIES); do
            if curl -k --connect-timeout 5 https://${{ env.VM_IP }}:8443/ping; then
              echo "Successfully connected to Rancher on VM IP."
              break
            else
              echo "Rancher is not yet accessible, retrying in $RETRY_DELAY seconds..."
              sleep $RETRY_DELAY
            fi
          done
          if [ $i -eq $MAX_RETRIES ]; then
            echo "Failed to connect to Rancher after multiple attempts." >&2
            exit 1
          fi

      - name: Setup Go
        if: inputs.test_suite == 'api' || inputs.test_suite == 'all'
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true
          cache-dependency-path: api-tests/go.sum

      - name: Setup Node.js
        if: inputs.test_suite == 'ui' || inputs.test_suite == 'all'
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'ui-tests/package-lock.json'

      - name: API Tests
        if: inputs.test_suite == 'api' || inputs.test_suite == 'all'
        working-directory: api-tests
        env:
          RANCHER_URL: https://${{ env.VM_IP }}:8443
        run: |
          go mod download
          go test -v ./...

      - name: UI Tests
        if: inputs.test_suite == 'ui' || inputs.test_suite == 'all'
        uses: cypress-io/github-action@v6
        with:
          working-directory: ui-tests
          browser: chrome
        env:
          CYPRESS_BASE_URL: https://${{ env.VM_IP }}:8443
          CYPRESS_VERIFY_SSL: false
          NODE_TLS_REJECT_UNAUTHORIZED: '0'

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-artifacts
          path: |
            ui-tests/cypress/videos
            ui-tests/cypress/screenshots
            api-tests/test-reports

      - name: Terraform Destroy
        if: always()
        working-directory: terraform
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
        run: |
          terraform destroy -auto-approve \
            -var "project=${{ secrets.GCP_PROJECT_ID }}" \
            -var "zone=us-central1-a" \
            -var "machine_type=e2-medium" \
            -var "ssh_public_key=${{ env.SSH_PUBLIC_KEY }}"
