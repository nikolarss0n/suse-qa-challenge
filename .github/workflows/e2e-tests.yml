name: Rancher Test Suite

on:
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Select the test suite to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - ui
          - api
  push:
    branches: [main, 'test/**', 'feature/**']
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      ADMIN_PASSWORD: ${{ secrets.RANCHER_ADMIN_PASSWORD }}
      VM_IP: ""

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.4.6'

      - name: Configure GCP Credentials
        run: |
          echo '${{ secrets.GCP_SA_KEY }}' > credentials.json
          export GOOGLE_APPLICATION_CREDENTIALS="credentials.json"

      - name: Initialize Terraform
        working-directory: terraform
        run: terraform init

      - name: Provision VM
        id: vm
        working-directory: terraform
        run: |
          terraform apply -auto-approve \
            -var "project=${{ secrets.GCP_PROJECT_ID }}" \
            -var "region=us-central1" \
            -var "zone=us-central1-a" \
            -var "machine_type=e2-medium" \
            -var 'tags=["rancher-server","http-server","https-server"]'
          echo "vm_ip=$(terraform output -raw instance_ip)" >> $GITHUB_ENV

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Wait for VM
        run: |
          until ssh -o StrictHostKeyChecking=no ubuntu@${{ env.vm_ip }} "echo 'VM is ready'"; do
            echo "Waiting for VM to be ready..."
            sleep 10
          done

      - name: Setup VM Environment
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ env.vm_ip }} << 'EOF'
            # Install Docker
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            sudo usermod -aG docker ubuntu

            # Install necessary tools
            sudo apt-get update
            sudo apt-get install -y curl git make
          EOF

      - name: Install Rancher
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ env.vm_ip }} << 'EOF'
            docker run -d --restart=unless-stopped \
              -p 443:443 \
              --privileged \
              rancher/rancher:latest
          EOF

      - name: Wait for Rancher
        run: |
          until curl -sk https://${{ env.vm_ip }}/ping > /dev/null 2>&1; do
            echo "Waiting for Rancher..."
            sleep 10
          done

      - name: Copy Test Files
        run: |
          scp -r -o StrictHostKeyChecking=no \
            api-tests ui-tests scripts \
            ubuntu@${{ env.vm_ip }}:/home/ubuntu/

      - name: Setup Test Environment
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ env.vm_ip }} << 'EOF'
            # Install Go
            curl -LO https://go.dev/dl/go1.21.0.linux-amd64.tar.gz
            sudo tar -C /usr/local -xzf go1.21.0.linux-amd64.tar.gz
            export PATH=$PATH:/usr/local/go/bin

            # Install Node.js
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
            sudo apt-get install -y nodejs

            # Setup test dependencies
            cd /home/ubuntu/api-tests && go mod download
            cd /home/ubuntu/ui-tests && npm install
          EOF

      - name: Run Tests
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ env.vm_ip }} << 'EOF'
            export PATH=$PATH:/usr/local/go/bin
            
            if [[ "${{ github.event.inputs.test_suite }}" == "api" || "${{ github.event.inputs.test_suite }}" == "all" ]]; then
              cd /home/ubuntu/api-tests && go test -v ./...
            fi

            if [[ "${{ github.event.inputs.test_suite }}" == "ui" || "${{ github.event.inputs.test_suite }}" == "all" ]]; then
              cd /home/ubuntu/ui-tests && npm test
            fi
          EOF

      - name: Retrieve Test Results
        run: |
          mkdir -p test-results
          scp -r -o StrictHostKeyChecking=no \
            ubuntu@${{ env.vm_ip }}:/home/ubuntu/api-tests/test-results/* \
            ubuntu@${{ env.vm_ip }}:/home/ubuntu/ui-tests/cypress/videos/* \
            ubuntu@${{ env.vm_ip }}:/home/ubuntu/ui-tests/cypress/screenshots/* \
            test-results/

      - name: Upload Test Artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: test-results

      - name: Cleanup
        if: always()
        working-directory: terraform
        run: |
          terraform destroy -auto-approve \
            -var "project=${{ secrets.GCP_PROJECT_ID }}" \
            -var "region=us-central1" \
            -var "zone=us-central1-a"